import pandas as pd
import streamlit as st
import json
import base64
from io import BytesIO
from PIL import Image
from sklearn.metrics.pairwise import cosine_similarity
from gensim.models.doc2vec import Doc2Vec, TaggedDocument
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

stop_words = set(stopwords.words("russian"))
lemmatizer = WordNetLemmatizer()


def preprocess(text: str):
    tokens = nltk.word_tokenize(text.lower())
    tokens = [lemmatizer.lemmatize(w) for w in tokens if w.isalpha()]
    tokens = [w for w in tokens if w not in stop_words]
    return tokens

def build_model(df, column="Task"):
    documents = [TaggedDocument(preprocess(task), [i]) for i, task in enumerate(df[column])]
    model = Doc2Vec(vector_size=100, window=5, min_count=1, workers=4, epochs=40)
    model.build_vocab(documents)
    model.train(documents, total_examples=model.corpus_count, epochs=model.epochs)
    return model

def find_similar_task(df, model, user_text, column="Task", topn=1):
    user_vec = model.infer_vector(preprocess(user_text))
    task_vecs = [model.infer_vector(preprocess(task)) for task in df[column]]
    sims = cosine_similarity([user_vec], task_vecs)[0]
    best_idx = sims.argsort()[::-1][:topn]
    return df[column].iloc[best_idx].tolist()

def show_images(row):
    img_list = json.loads(row)
    for img_b64 in img_list:
        img_bytes = base64.b64decode(img_b64)
        img = Image.open(BytesIO(img_bytes))
        st.image(img)


def show_A(df):
    k = 0
    for _, row in df.iterrows():
        k = k + 1
        st.subheader(f"–ó–∞–¥–∞—á–∞ ‚Ññ{k}: \n {row['Task']}")
        try:
            choices = json.loads(row["Choices"])
        except Exception:
            choices = []
        show_images(row['Images'])
        answer = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
            choices,
            index=None,
            key=f"task_{k}"
        )


def show_B(df):
    k = 0
    for i, row in df.iterrows():
        k = k + 1
        st.subheader(f"–ó–∞–¥–∞—á–∞ ‚Ññ{k}: \n {row['Task']}")
        show_images(row['Images'])
        answer = st.text_input("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:", key=f"answer_{i}")


def show_C(df):
    k = 0
    for i, row in df.iterrows():
        k = k + 1
        st.subheader(f"–ó–∞–¥–∞—á–∞ ‚Ññ{k}: \n {row['Task']}")
        show_images(row['Images'])
        answer = st.text_input("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:", key=f"answer_{i}")


st.title('üìö –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ –í–£–ó—ã')

DATA_PATH = 'https://raw.githubusercontent.com/jahongirka178/PhysRecSys/refs/heads/master/problems.csv'

df = pd.read_csv(DATA_PATH)
df['Level'] = df['Level'].replace({'–ê': 'A'})
df['Level'] = df['Level'].replace({'–°': 'C'})


st.write('''–ù–∞ —Ä–µ–∞–ª—å–Ω–æ–º —ç–∫–∑–∞–º–µ–Ω–µ –∑–∞–¥–∞—á–∏ –¥–µ–ª—è—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã: \n
–ß–∞—Å—Ç—å 1 —Å–æ–¥–µ—Ä–∂–∏—Ç 30 –∑–∞–¥–∞–Ω–∏–π (–ê1 ‚Äì –ê30). –ö –∫–∞–∂–¥–æ–º—É –∑–∞–¥–∞–Ω–∏—é –¥–∞–µ—Ç—Å—è 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω. \n
–ß–∞—Å—Ç—å 2 —Å–æ–¥–µ—Ä–∂–∏—Ç 4 –∑–∞–¥–∞–Ω–∏—è (–í1 ‚Äì –í4), –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –¥–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –≤ —á–∏—Å–ª–µ–Ω–Ω–æ–º –≤–∏–¥–µ. \n
–ß–∞—Å—Ç—å 3 —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 –∑–∞–¥–∞–Ω–∏–π (–°1 ‚Äì –°6), –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–æ–Ω—ã —Ñ–∏–∑–∏–∫–∏, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–≤–æ–¥—è—Ç—Å—è —Ç—Ä–µ–±—É–µ–º—ã–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è. \n
''')
st.header('–ù–∏–∂–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏. \n –ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤!')

# Sidebar
st.sidebar.header('–ü–æ–¥–±–æ—Ä –∑–∞–¥–∞—á:')

levels = df['Level'].unique().tolist()
levels.append('–†–∞–∑–Ω—ã–µ')

level_input = st.sidebar.selectbox('–£—Ä–æ–≤–µ–Ω—å –∑–∞–¥–∞—á', levels)
if level_input != '–†–∞–∑–Ω—ã–µ':
    number_of_tasks = st.sidebar.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á', 0, 20, 10)

if level_input == 'A':
    st.subheader(f'–ó–∞–¥–∞—á–∏ —É—Ä–æ–≤–Ω—è A - {number_of_tasks} —à—Ç—É–∫')
    a_tasks = df[df['Level'] == 'A'].sample(int(number_of_tasks))
    show_A(a_tasks)

if level_input == 'B':
    st.subheader(f'–ó–∞–¥–∞—á–∏ —É—Ä–æ–≤–Ω—è B - {number_of_tasks} —à—Ç—É–∫')
    b_tasks = df[df['Level'] == 'B'].sample(int(number_of_tasks))
    show_B(b_tasks)

if level_input == 'C':
    st.subheader(f'–ó–∞–¥–∞—á–∏ —É—Ä–æ–≤–Ω—è C - {number_of_tasks} —à—Ç—É–∫')
    c_tasks = df[df['Level'] == 'C'].sample(int(number_of_tasks))
    show_C(c_tasks)

if level_input == '–†–∞–∑–Ω—ã–µ':
    st.subheader(f'–ó–∞–¥–∞—á–∏ —É—Ä–æ–≤–Ω—è A - 15 —à—Ç—É–∫.')
    a_tasks = df[df['Level'] == 'A'].sample(15)
    show_A(a_tasks)

    st.subheader(f'–ó–∞–¥–∞—á–∏ —É—Ä–æ–≤–Ω—è B - 10 —à—Ç—É–∫.')
    b_tasks = df[df['Level'] == 'B'].sample(10)
    show_B(b_tasks)

    st.subheader(f'–ó–∞–¥–∞—á–∏ —É—Ä–æ–≤–Ω—è C - 5 —à—Ç—É–∫.')
    c_tasks = df[df['Level'] == 'C'].sample(5)
    show_C(c_tasks)


if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"):
    st.write("–ò–¥—ë—Ç –ø–æ–¥—Å—á—ë—Ç...")


st.header('–ü–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏.')
st.sidebar.header('–ü–æ–¥–±–æ—Ä –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞—á:')
answer = st.sidebar.text_area(
    "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ü–µ–ª–∞—è –∑–∞–¥–∞—á–∞",
    height=200
)

if st.sidebar.button("–ù–∞–π—Ç–∏"):
    model = build_model(df)
    result = find_similar_task(df, model, answer, topn=5)
    st.dataframe(result)

